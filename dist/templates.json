[{"name":"DataList","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div className={classes.root}>\n      {(() => {\n    const {\n      env,\n      getProperty,\n      useAllQuery,\n      ModelProvider,\n      useFilter\n    } = B;\n    const [page, setPage] = useState(1);\n    const {\n      take,\n      filter,\n      hidePagination,\n      type,\n      model,\n      showError,\n      order,\n      orderBy\n    } = options;\n    const rowsPerPage = parseInt(take, 10) || 50;\n    const isEmpty = children.length === 0;\n    const isDev = env === 'dev';\n    const isPristine = isEmpty && isDev;\n    const displayError = showError === 'built-in';\n\n    const builderLayout = () => <>\n            <div className={type === 'grid' ? classes.grid : ''}>\n              <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')}>\n                {isPristine ? 'Data List' : children}\n              </div>\n\n              {Array.from(Array(rowsPerPage - 1).keys()).map(key => <div key={key} className={[isDev ? classes.pristine : '', classes.empty, classes.placeholder].join(' ')}>\n                  {isDev ? 'Dynamic Item' : ''}\n                </div>)}\n            </div>\n            <div className={classes.footer}>\n              {isDev && !hidePagination && <Pagination totalCount={0} resultCount={rowsPerPage} currentPage={1} />}\n            </div>\n          </>;\n\n    const deepMerge = (...objects) => {\n      const isObject = item => item && typeof item === 'object' && !Array.isArray(item);\n\n      return objects.reduce((accumulator, object) => {\n        Object.keys(object).forEach(key => {\n          const accumulatorValue = accumulator[key];\n          const value = object[key];\n\n          if (Array.isArray(accumulatorValue) && Array.isArray(value)) {\n            accumulator[key] = accumulatorValue.concat(value);\n          } else if (isObject(accumulatorValue) && isObject(value)) {\n            accumulator[key] = deepMerge(accumulatorValue, value);\n          } else {\n            accumulator[key] = value;\n          }\n        });\n        return accumulator;\n      }, {});\n    };\n\n    const orderByArray = [orderBy].flat();\n    const sort = !isDev && orderBy ? orderByArray.reduceRight((acc, property, index) => {\n      const prop = getProperty(property);\n      return index === orderByArray.length - 1 ? {\n        [prop.name]: order.toUpperCase()\n      } : {\n        [prop.name]: acc\n      };\n    }, {}) : {};\n    const newFilter = filter;\n    const where = useFilter(newFilter);\n    const {\n      loading,\n      error,\n      data,\n      refetch\n    } = model && useAllQuery(model, {\n      rawFilter: where,\n      skip: page ? (page - 1) * rowsPerPage : 0,\n      take: rowsPerPage,\n      variables: { ...(orderBy ? {\n          sort: {\n            relation: sort\n          }\n        } : {})\n      }\n    });\n    useEffect(() => {\n      B.defineFunction('Refetch', () => refetch());\n    }, []);\n\n    const canvasLayout = () => {\n      if (!model) {\n        return builderLayout();\n      }\n\n      if (loading) {\n        B.triggerEvent('onLoad', loading);\n        return <div className={classes.skeleton} />;\n      }\n\n      if (error && !displayError) {\n        B.triggerEvent('onError', error.message);\n      }\n\n      if (error && displayError) {\n        return <span>{error.message}</span>;\n      }\n\n      const {\n        results = [],\n        totalCount\n      } = data || {};\n      const resultCount = results && results.length;\n      const hasResults = resultCount > 0;\n\n      if (hasResults) {\n        B.triggerEvent('onSuccess', results);\n      } else {\n        B.triggerEvent('onNoResults');\n      }\n\n      return <>\n              <div className={type === 'grid' ? classes.grid : ''}>\n                {results.map(item => <ModelProvider key={item.id} value={item} id={model}>\n                    {children}\n                  </ModelProvider>)}\n              </div>\n              <div className={classes.footer}>\n                {!isEmpty && !hidePagination && <Pagination totalCount={totalCount} resultCount={resultCount} currentPage={page} />}\n              </div>\n            </>;\n    };\n\n    function Pagination({\n      totalCount,\n      resultCount,\n      currentPage\n    }) {\n      const firstItem = currentPage ? (currentPage - 1) * rowsPerPage : 0;\n      useEffect(() => {\n        const totalPages = Math.ceil(totalCount / rowsPerPage);\n\n        if (currentPage > totalPages) {\n          setPage(totalPages);\n        }\n      }, [totalCount]);\n      const totalText = env === 'dev' ? '[total]' : totalCount;\n      return <>\n              <span>\n                {firstItem + 1}\n                {firstItem + 1 !== totalCount && ` - ${firstItem + resultCount}`}{' '}\n                of {totalText}\n              </span>\n              <div className={classes.pagination}>\n                {typeof currentPage !== 'undefined' && currentPage > 1 ? <button className={classes.button} type=\"button\" onClick={() => setPage(v => v - 1)}>\n                    <span className={[classes.arrow, 'zmdi zmdi-chevron-left'].join(' ')} />\n                  </button> : <span className={[classes.arrow, classes.arrowDisabled, 'zmdi zmdi-chevron-left'].join(' ')} />}\n                {(typeof currentPage === 'undefined' ? 1 : currentPage) < totalCount / rowsPerPage ? <button className={classes.button} type=\"button\" onClick={() => setPage(v => v + 1)}>\n                    <span className={[classes.arrow, 'zmdi zmdi-chevron-right'].join(' ')} />\n                  </button> : <span className={[classes.arrow, classes.arrowDisabled, 'zmdi zmdi-chevron-right'].join(' ')} />}\n              </div>\n            </>;\n    }\n\n    return isDev ? builderLayout() : canvasLayout();\n  })()}\n    </div>","styles":"B => theme => {\n  const style = new B.Styling(theme);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    root: {\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3])\n    },\n    header: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      flexDirection: 'row-reverse',\n      width: '100%'\n    },\n    button: {\n      background: 'transparent',\n      border: 'none',\n      display: 'inline-block',\n      padding: 0,\n      margin: 0,\n      cursor: 'pointer',\n      '&:active': {\n        outline: 'none'\n      }\n    },\n    footer: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      padding: ['0.75rem', 0]\n    },\n    placeholder: {\n      opacity: '0.4'\n    },\n    pagination: {\n      marginLeft: '1rem'\n    },\n    arrow: {\n      padding: '1rem',\n      fontSize: '1.625rem',\n      color: '#000',\n      textDecoration: 'none'\n    },\n    arrowDisabled: {\n      color: '#ccc'\n    },\n    skeleton: {\n      height: `calc(${style.getFont('Body1').Mobile} * 1.2)`,\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        height: `calc(${style.getFont('Body1').Portrait} * 1.2)`\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        height: `calc(${style.getFont('Body1').Landscape} * 1.2)`\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        height: `calc(${style.getFont('Body1').Desktop} * 1.2)`\n      },\n      backgroundColor: '#eee',\n      borderRadius: 8,\n      overflow: 'hidden',\n      '&::after': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        backgroundImage: 'linear-gradient(90deg, #eee 25%, #fff 50%, #eee 75%)',\n        backgroundSize: '200% 100%',\n        backgroundRepeat: 'no-repeat',\n        backgroundPositionX: '150%',\n        borderRadius: `calc(${style.getFont('Body2').Landscape} / 2)`,\n        content: '\"\"',\n        animation: 'loading 1.5s infinite'\n      }\n    },\n    [`@media ${B.mediaMinWidth(600)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      }\n    },\n    [`@media ${B.mediaMinWidth(960)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      }\n    },\n    [`@media ${B.mediaMinWidth(1280)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      }\n    },\n    grid: {\n      display: 'grid',\n      gridTemplateColumns: ({\n        options: {\n          width\n        }\n      }) => `repeat(auto-fit, minmax(${width}, 1fr))`,\n      gridGap: ({\n        options: {\n          gap\n        }\n      }) => `${gap}`\n    },\n    empty: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '4rem',\n      height: '100%',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}","functions":["Refetch"],"triggers":["onLoad","onError","onSuccess","onNoResults"]},{"name":"MeComponentContainer","type":"BODY_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div>\n      <h1 className={classes.root}>GetMe</h1>\n      <B.GetMe authenticationProfileId={options.authProfile}>\n        {({\n      loading,\n      error,\n      data\n    }) => {\n      console.log({\n        data,\n        loading,\n        error\n      });\n\n      if (loading) {\n        return <span>Loading...</span>;\n      }\n\n      if (error) {\n        return <span>Something went wrong: {error.message} :(</span>;\n      }\n\n      const {\n        id\n      } = data;\n      return <div>\n              <p>Fetched a record with ID: {id}.</p>\n              {children}\n            </div>;\n    }}\n      </B.GetMe>\n    </div>","styles":"B => ({\n  typography\n}) => ({})","functions":[],"triggers":[]},{"name":"OneComponentContainer","type":"BODY_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"<div>\n      <h1 className={classes.root}>GetOne</h1>\n      <B.GetOne modelId={options.model} filter={options.filter}>\n        {({\n      loading,\n      error,\n      data\n    }) => {\n      console.log({\n        data,\n        loading,\n        error\n      });\n\n      if (loading) {\n        return <span>Loading...</span>;\n      }\n\n      if (error) {\n        return <span>Something went wrong: {error.message} :(</span>;\n      }\n\n      const {\n        id\n      } = data;\n      return <div>\n              <p>Fetched a record with ID: {id}.</p>\n            </div>;\n    }}\n      </B.GetOne>\n    </div>","styles":"B => ({\n  typography\n}) => ({})","functions":[],"triggers":[]},{"name":"property","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"<div className={classes.root}>\n      Blaat\n      {(() => {\n    const {\n      Property\n    } = B;\n    const {\n      propertyId\n    } = options;\n    const property = B.getProperty(propertyId);\n    return <>\n            <p>\n              <Property id={propertyId} />\n            </p>\n            {property && <p>\n                {property.kind},{property.modelId}, {property.name}\n              </p>}\n          </>;\n  })()}\n    </div>","styles":"() => () => ({\n  root: {}\n})","functions":[],"triggers":[]}]
